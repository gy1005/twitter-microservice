/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "twitter_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace twitter {


Tweet_::~Tweet_() throw() {
}


void Tweet_::__set_tweet_id(const std::string& val) {
  this->tweet_id = val;
}

void Tweet_::__set_user_id(const std::string& val) {
  this->user_id = val;
}

void Tweet_::__set_file_id(const std::string& val) {
  this->file_id = val;
__isset.file_id = true;
}

void Tweet_::__set_text(const std::string& val) {
  this->text = val;
}
std::ostream& operator<<(std::ostream& out, const Tweet_& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Tweet_::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tweet_id);
          this->__isset.tweet_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->user_id);
          this->__isset.user_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->file_id);
          this->__isset.file_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->text);
          this->__isset.text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Tweet_::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Tweet_");

  xfer += oprot->writeFieldBegin("tweet_id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->tweet_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("user_id", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->user_id);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.file_id) {
    xfer += oprot->writeFieldBegin("file_id", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->file_id);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("text", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->text);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Tweet_ &a, Tweet_ &b) {
  using ::std::swap;
  swap(a.tweet_id, b.tweet_id);
  swap(a.user_id, b.user_id);
  swap(a.file_id, b.file_id);
  swap(a.text, b.text);
  swap(a.__isset, b.__isset);
}

Tweet_::Tweet_(const Tweet_& other0) {
  tweet_id = other0.tweet_id;
  user_id = other0.user_id;
  file_id = other0.file_id;
  text = other0.text;
  __isset = other0.__isset;
}
Tweet_& Tweet_::operator=(const Tweet_& other1) {
  tweet_id = other1.tweet_id;
  user_id = other1.user_id;
  file_id = other1.file_id;
  text = other1.text;
  __isset = other1.__isset;
  return *this;
}
void Tweet_::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Tweet_(";
  out << "tweet_id=" << to_string(tweet_id);
  out << ", " << "user_id=" << to_string(user_id);
  out << ", " << "file_id="; (__isset.file_id ? (out << to_string(file_id)) : (out << "<null>"));
  out << ", " << "text=" << to_string(text);
  out << ")";
}


User_::~User_() throw() {
}


void User_::__set_user_id(const std::string& val) {
  this->user_id = val;
}

void User_::__set_username(const std::string& val) {
  this->username = val;
}

void User_::__set_homepage(const std::string& val) {
  this->homepage = val;
}
std::ostream& operator<<(std::ostream& out, const User_& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t User_::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->user_id);
          this->__isset.user_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->username);
          this->__isset.username = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->homepage);
          this->__isset.homepage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t User_::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("User_");

  xfer += oprot->writeFieldBegin("user_id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->user_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("username", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->username);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("homepage", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->homepage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(User_ &a, User_ &b) {
  using ::std::swap;
  swap(a.user_id, b.user_id);
  swap(a.username, b.username);
  swap(a.homepage, b.homepage);
  swap(a.__isset, b.__isset);
}

User_::User_(const User_& other2) {
  user_id = other2.user_id;
  username = other2.username;
  homepage = other2.homepage;
  __isset = other2.__isset;
}
User_& User_::operator=(const User_& other3) {
  user_id = other3.user_id;
  username = other3.username;
  homepage = other3.homepage;
  __isset = other3.__isset;
  return *this;
}
void User_::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "User_(";
  out << "user_id=" << to_string(user_id);
  out << ", " << "username=" << to_string(username);
  out << ", " << "homepage=" << to_string(homepage);
  out << ")";
}


File_::~File_() throw() {
}


void File_::__set_file_id(const std::string& val) {
  this->file_id = val;
}

void File_::__set_content(const std::string& val) {
  this->content = val;
}
std::ostream& operator<<(std::ostream& out, const File_& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t File_::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->file_id);
          this->__isset.file_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->content);
          this->__isset.content = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t File_::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("File_");

  xfer += oprot->writeFieldBegin("file_id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->file_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("content", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->content);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(File_ &a, File_ &b) {
  using ::std::swap;
  swap(a.file_id, b.file_id);
  swap(a.content, b.content);
  swap(a.__isset, b.__isset);
}

File_::File_(const File_& other4) {
  file_id = other4.file_id;
  content = other4.content;
  __isset = other4.__isset;
}
File_& File_::operator=(const File_& other5) {
  file_id = other5.file_id;
  content = other5.content;
  __isset = other5.__isset;
  return *this;
}
void File_::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "File_(";
  out << "file_id=" << to_string(file_id);
  out << ", " << "content=" << to_string(content);
  out << ")";
}


Tweet::~Tweet() throw() {
}


void Tweet::__set_tweet_id(const std::string& val) {
  this->tweet_id = val;
}

void Tweet::__set_user(const User_& val) {
  this->user = val;
}

void Tweet::__set_text(const std::string& val) {
  this->text = val;
}

void Tweet::__set_file(const File_& val) {
  this->file = val;
__isset.file = true;
}
std::ostream& operator<<(std::ostream& out, const Tweet& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Tweet::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tweet_id);
          this->__isset.tweet_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->user.read(iprot);
          this->__isset.user = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->text);
          this->__isset.text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->file.read(iprot);
          this->__isset.file = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Tweet::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Tweet");

  xfer += oprot->writeFieldBegin("tweet_id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->tweet_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("user", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->user.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("text", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->text);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.file) {
    xfer += oprot->writeFieldBegin("file", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->file.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Tweet &a, Tweet &b) {
  using ::std::swap;
  swap(a.tweet_id, b.tweet_id);
  swap(a.user, b.user);
  swap(a.text, b.text);
  swap(a.file, b.file);
  swap(a.__isset, b.__isset);
}

Tweet::Tweet(const Tweet& other6) {
  tweet_id = other6.tweet_id;
  user = other6.user;
  text = other6.text;
  file = other6.file;
  __isset = other6.__isset;
}
Tweet& Tweet::operator=(const Tweet& other7) {
  tweet_id = other7.tweet_id;
  user = other7.user;
  text = other7.text;
  file = other7.file;
  __isset = other7.__isset;
  return *this;
}
void Tweet::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Tweet(";
  out << "tweet_id=" << to_string(tweet_id);
  out << ", " << "user=" << to_string(user);
  out << ", " << "text=" << to_string(text);
  out << ", " << "file="; (__isset.file ? (out << to_string(file)) : (out << "<null>"));
  out << ")";
}

} // namespace
