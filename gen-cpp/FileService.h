/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef FileService_H
#define FileService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "twitter_types.h"

namespace twitter {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class FileServiceIf {
 public:
  virtual ~FileServiceIf() {}
  virtual void getFile_(File_& _return, const std::string& file_id, const std::string& header) = 0;
};

class FileServiceIfFactory {
 public:
  typedef FileServiceIf Handler;

  virtual ~FileServiceIfFactory() {}

  virtual FileServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(FileServiceIf* /* handler */) = 0;
};

class FileServiceIfSingletonFactory : virtual public FileServiceIfFactory {
 public:
  FileServiceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<FileServiceIf>& iface) : iface_(iface) {}
  virtual ~FileServiceIfSingletonFactory() {}

  virtual FileServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(FileServiceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<FileServiceIf> iface_;
};

class FileServiceNull : virtual public FileServiceIf {
 public:
  virtual ~FileServiceNull() {}
  void getFile_(File_& /* _return */, const std::string& /* file_id */, const std::string& /* header */) {
    return;
  }
};

typedef struct _FileService_getFile__args__isset {
  _FileService_getFile__args__isset() : file_id(false), header(false) {}
  bool file_id :1;
  bool header :1;
} _FileService_getFile__args__isset;

class FileService_getFile__args {
 public:

  FileService_getFile__args(const FileService_getFile__args&);
  FileService_getFile__args& operator=(const FileService_getFile__args&);
  FileService_getFile__args() : file_id(), header() {
  }

  virtual ~FileService_getFile__args() throw();
  std::string file_id;
  std::string header;

  _FileService_getFile__args__isset __isset;

  void __set_file_id(const std::string& val);

  void __set_header(const std::string& val);

  bool operator == (const FileService_getFile__args & rhs) const
  {
    if (!(file_id == rhs.file_id))
      return false;
    if (!(header == rhs.header))
      return false;
    return true;
  }
  bool operator != (const FileService_getFile__args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileService_getFile__args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FileService_getFile__pargs {
 public:


  virtual ~FileService_getFile__pargs() throw();
  const std::string* file_id;
  const std::string* header;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FileService_getFile__result__isset {
  _FileService_getFile__result__isset() : success(false) {}
  bool success :1;
} _FileService_getFile__result__isset;

class FileService_getFile__result {
 public:

  FileService_getFile__result(const FileService_getFile__result&);
  FileService_getFile__result& operator=(const FileService_getFile__result&);
  FileService_getFile__result() {
  }

  virtual ~FileService_getFile__result() throw();
  File_ success;

  _FileService_getFile__result__isset __isset;

  void __set_success(const File_& val);

  bool operator == (const FileService_getFile__result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FileService_getFile__result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileService_getFile__result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FileService_getFile__presult__isset {
  _FileService_getFile__presult__isset() : success(false) {}
  bool success :1;
} _FileService_getFile__presult__isset;

class FileService_getFile__presult {
 public:


  virtual ~FileService_getFile__presult() throw();
  File_* success;

  _FileService_getFile__presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class FileServiceClient : virtual public FileServiceIf {
 public:
  FileServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  FileServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getFile_(File_& _return, const std::string& file_id, const std::string& header);
  void send_getFile_(const std::string& file_id, const std::string& header);
  void recv_getFile_(File_& _return);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class FileServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<FileServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (FileServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getFile_(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  FileServiceProcessor(::apache::thrift::stdcxx::shared_ptr<FileServiceIf> iface) :
    iface_(iface) {
    processMap_["getFile_"] = &FileServiceProcessor::process_getFile_;
  }

  virtual ~FileServiceProcessor() {}
};

class FileServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  FileServiceProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< FileServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< FileServiceIfFactory > handlerFactory_;
};

class FileServiceMultiface : virtual public FileServiceIf {
 public:
  FileServiceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<FileServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~FileServiceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<FileServiceIf> > ifaces_;
  FileServiceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<FileServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getFile_(File_& _return, const std::string& file_id, const std::string& header) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getFile_(_return, file_id, header);
    }
    ifaces_[i]->getFile_(_return, file_id, header);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class FileServiceConcurrentClient : virtual public FileServiceIf {
 public:
  FileServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  FileServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getFile_(File_& _return, const std::string& file_id, const std::string& header);
  int32_t send_getFile_(const std::string& file_id, const std::string& header);
  void recv_getFile_(File_& _return, const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
