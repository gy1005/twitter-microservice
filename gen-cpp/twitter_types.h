/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef twitter_TYPES_H
#define twitter_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>


namespace twitter {

class Tweet_;

class User_;

class File_;

class Tweet;

typedef struct _Tweet___isset {
  _Tweet___isset() : tweet_id(false), user_id(false), file_id(false), text(false), header(false) {}
  bool tweet_id :1;
  bool user_id :1;
  bool file_id :1;
  bool text :1;
  bool header :1;
} _Tweet___isset;

class Tweet_ : public virtual ::apache::thrift::TBase {
 public:

  Tweet_(const Tweet_&);
  Tweet_& operator=(const Tweet_&);
  Tweet_() : tweet_id(), user_id(), file_id(), text(), header() {
  }

  virtual ~Tweet_() throw();
  std::string tweet_id;
  std::string user_id;
  std::string file_id;
  std::string text;
  std::string header;

  _Tweet___isset __isset;

  void __set_tweet_id(const std::string& val);

  void __set_user_id(const std::string& val);

  void __set_file_id(const std::string& val);

  void __set_text(const std::string& val);

  void __set_header(const std::string& val);

  bool operator == (const Tweet_ & rhs) const
  {
    if (!(tweet_id == rhs.tweet_id))
      return false;
    if (!(user_id == rhs.user_id))
      return false;
    if (!(file_id == rhs.file_id))
      return false;
    if (!(text == rhs.text))
      return false;
    if (!(header == rhs.header))
      return false;
    return true;
  }
  bool operator != (const Tweet_ &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Tweet_ & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Tweet_ &a, Tweet_ &b);

std::ostream& operator<<(std::ostream& out, const Tweet_& obj);

typedef struct _User___isset {
  _User___isset() : user_id(false), username(false), homepage(false), header(false) {}
  bool user_id :1;
  bool username :1;
  bool homepage :1;
  bool header :1;
} _User___isset;

class User_ : public virtual ::apache::thrift::TBase {
 public:

  User_(const User_&);
  User_& operator=(const User_&);
  User_() : user_id(), username(), homepage(), header() {
  }

  virtual ~User_() throw();
  std::string user_id;
  std::string username;
  std::string homepage;
  std::string header;

  _User___isset __isset;

  void __set_user_id(const std::string& val);

  void __set_username(const std::string& val);

  void __set_homepage(const std::string& val);

  void __set_header(const std::string& val);

  bool operator == (const User_ & rhs) const
  {
    if (!(user_id == rhs.user_id))
      return false;
    if (!(username == rhs.username))
      return false;
    if (!(homepage == rhs.homepage))
      return false;
    if (!(header == rhs.header))
      return false;
    return true;
  }
  bool operator != (const User_ &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_ & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(User_ &a, User_ &b);

std::ostream& operator<<(std::ostream& out, const User_& obj);

typedef struct _File___isset {
  _File___isset() : file_id(false), content(false), header(false) {}
  bool file_id :1;
  bool content :1;
  bool header :1;
} _File___isset;

class File_ : public virtual ::apache::thrift::TBase {
 public:

  File_(const File_&);
  File_& operator=(const File_&);
  File_() : file_id(), content(), header() {
  }

  virtual ~File_() throw();
  std::string file_id;
  std::string content;
  std::string header;

  _File___isset __isset;

  void __set_file_id(const std::string& val);

  void __set_content(const std::string& val);

  void __set_header(const std::string& val);

  bool operator == (const File_ & rhs) const
  {
    if (!(file_id == rhs.file_id))
      return false;
    if (!(content == rhs.content))
      return false;
    if (!(header == rhs.header))
      return false;
    return true;
  }
  bool operator != (const File_ &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const File_ & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(File_ &a, File_ &b);

std::ostream& operator<<(std::ostream& out, const File_& obj);

typedef struct _Tweet__isset {
  _Tweet__isset() : tweet_id(false), user(false), text(false), file(false), header(false) {}
  bool tweet_id :1;
  bool user :1;
  bool text :1;
  bool file :1;
  bool header :1;
} _Tweet__isset;

class Tweet : public virtual ::apache::thrift::TBase {
 public:

  Tweet(const Tweet&);
  Tweet& operator=(const Tweet&);
  Tweet() : tweet_id(), text(), header() {
  }

  virtual ~Tweet() throw();
  std::string tweet_id;
  User_ user;
  std::string text;
  File_ file;
  std::string header;

  _Tweet__isset __isset;

  void __set_tweet_id(const std::string& val);

  void __set_user(const User_& val);

  void __set_text(const std::string& val);

  void __set_file(const File_& val);

  void __set_header(const std::string& val);

  bool operator == (const Tweet & rhs) const
  {
    if (!(tweet_id == rhs.tweet_id))
      return false;
    if (!(user == rhs.user))
      return false;
    if (!(text == rhs.text))
      return false;
    if (!(file == rhs.file))
      return false;
    if (!(header == rhs.header))
      return false;
    return true;
  }
  bool operator != (const Tweet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Tweet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Tweet &a, Tweet &b);

std::ostream& operator<<(std::ostream& out, const Tweet& obj);

} // namespace

#endif
